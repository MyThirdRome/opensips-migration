#!/bin/bash

###############################################################################
# OpenSIPs Automated Installation Script
# Generated by OpenSIPs Migration Tool
# Source Server: OpenSIPs 3.0.3 on CentOS Linux 7
# Target: Fresh VPS installation (Ubuntu/Debian)
# Updated with Control Panel fixes for proper database configuration
###############################################################################

set -e

echo "=================================================="
echo "OpenSIPs Migration - Automated Installation"
echo "=================================================="

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Please run as root${NC}"
    exit 1
fi

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

echo -e "${GREEN}Step 0: Reassembling Database Dumps${NC}"
if [ -f "database_dump.sql.partaa" ]; then
    if [ ! -f "database_dump.sql" ]; then
        echo "Main database was split for GitHub. Reassembling..."
        cat database_dump.sql.part* > database_dump.sql
        echo -e "${GREEN}✓ Main database reassembled successfully${NC}"
        echo "Database size: $(du -h database_dump.sql | cut -f1)"
    else
        echo -e "${GREEN}✓ Main database already reassembled${NC}"
    fi
else
    echo -e "${YELLOW}Warning: Split database parts not found${NC}"
fi

echo -e "${GREEN}Step 1: System Update${NC}"
apt-get update
apt-get upgrade -y

echo -e "${GREEN}Step 2: Installing Dependencies${NC}"
apt-get install -y \
    wget \
    curl \
    git \
    build-essential \
    libncurses5-dev \
    libssl-dev \
    libxml2-dev \
    libpcre3-dev \
    libmicrohttpd-dev \
    m4 \
    bison \
    flex \
    apache2 \
    php \
    php-mysql \
    php-gd \
    php-curl \
    php-xml \
    libapache2-mod-php

echo -e "${GREEN}Step 3: Installing MySQL/MariaDB${NC}"
apt-get install -y mariadb-server mariadb-client
systemctl enable mariadb
systemctl start mariadb

echo -e "${YELLOW}Setting up MySQL root password...${NC}"
echo "Please enter MySQL root password when prompted"
mysql_secure_installation

echo -e "${GREEN}Step 4: Creating OpenSIPs Databases${NC}"
echo "Please enter the MySQL root password you just set:"
read -s MYSQL_ROOT_PASSWORD
echo ""

# Create opensips database (core)
mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF
CREATE DATABASE IF NOT EXISTS opensips CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS General CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Create both users for maximum compatibility
CREATE USER IF NOT EXISTS 'opensips'@'localhost' IDENTIFIED BY 'opensipsrw';
CREATE USER IF NOT EXISTS 'web'@'localhost' IDENTIFIED BY 'opensipsrw';

-- Grant full permissions on both databases to both users
GRANT ALL PRIVILEGES ON opensips.* TO 'opensips'@'localhost';
GRANT ALL PRIVILEGES ON opensips.* TO 'web'@'localhost';
GRANT ALL PRIVILEGES ON General.* TO 'opensips'@'localhost';
GRANT ALL PRIVILEGES ON General.* TO 'web'@'localhost';

FLUSH PRIVILEGES;
EOF

echo -e "${GREEN}✓ Databases and users created${NC}"

echo -e "${GREEN}Step 5: Importing Database Dumps${NC}"

# Import main opensips database
if [ -f "$SCRIPT_DIR/database_dump.sql" ]; then
    echo "Importing OpenSIPs core database (this may take several minutes)..."
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" opensips < "$SCRIPT_DIR/database_dump.sql"
    echo -e "${GREEN}✓ OpenSIPs database imported${NC}"
else
    echo -e "${RED}ERROR: database_dump.sql not found in $SCRIPT_DIR${NC}"
    exit 1
fi

# Import General database (wholesale data)
if [ -f "$SCRIPT_DIR/general_database_dump.sql" ]; then
    echo "Importing General database (wholesale/carriers data)..."
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" General < "$SCRIPT_DIR/general_database_dump.sql"
    echo -e "${GREEN}✓ General database imported (carriers, clients, numbers, etc.)${NC}"
else
    echo -e "${YELLOW}Warning: general_database_dump.sql not found - wholesale features may be empty${NC}"
fi

echo -e "${GREEN}Step 6: Installing OpenSIPs 3.0.3${NC}"

# Download OpenSIPs source (matching source server version)
cd /usr/src
OPENSIPS_VERSION="3.0.3"
echo "Downloading OpenSIPs version $OPENSIPS_VERSION (matching source server)..."
wget https://opensips.org/pub/opensips/3.0.3/opensips-3.0.3.tar.gz
tar -xzf opensips-3.0.3.tar.gz
cd opensips-3.0.3

# Compile and install
echo "Compiling OpenSIPs (this may take several minutes)..."
make all
make install

echo -e "${GREEN}Step 7: Restoring Configuration Files${NC}"

# Extract configuration archive if it exists
if [ -f "$SCRIPT_DIR/opensips_files.tar.gz" ]; then
    cd /
    tar -xzf "$SCRIPT_DIR/opensips_files.tar.gz"
    echo -e "${GREEN}✓ Configuration files restored${NC}"
else
    echo -e "${YELLOW}Warning: opensips_files.tar.gz not found in $SCRIPT_DIR${NC}"
fi

# Ensure config directory exists
mkdir -p /etc/opensips
chmod 755 /etc/opensips

echo -e "${GREEN}Step 8: Restoring Web Interface${NC}"

# Restore Apache configuration
if [ -f "$SCRIPT_DIR/apache_config.tar.gz" ]; then
    echo "Restoring Apache configuration..."
    cd /
    tar -xzf "$SCRIPT_DIR/apache_config.tar.gz"
    echo -e "${GREEN}✓ Apache configuration restored${NC}"
else
    echo -e "${YELLOW}Warning: apache_config.tar.gz not found${NC}"
fi

# Restore web interface files
if [ -f "$SCRIPT_DIR/web_interface.tar.gz" ]; then
    echo "Restoring web interface (OpenSIPs Control Panel)..."
    cd /
    tar -xzf "$SCRIPT_DIR/web_interface.tar.gz"
    
    # Set proper permissions
    chown -R www-data:www-data /var/www/html
    chmod -R 755 /var/www/html
    find /var/www/html -name "*.php" -exec chmod 644 {} \;
    
    echo -e "${GREEN}✓ Web interface restored${NC}"
else
    echo -e "${YELLOW}Warning: web_interface.tar.gz not found${NC}"
fi

echo -e "${GREEN}Step 9: Configuring Control Panel Database Settings${NC}"

# Fix Control Panel configs to use correct database credentials
CP_CONFIG="/var/www/html/opensips-cp/config"

if [ -d "$CP_CONFIG" ]; then
    echo "Updating Control Panel configurations..."
    
    # Fix wholesale tools to use General database
    for tool in carriers clients numbers ranges codes ivrs ivrs_old tviewer; do
        if [ -f "$CP_CONFIG/tools/wholesale/$tool/db.inc.php" ]; then
            cat > "$CP_CONFIG/tools/wholesale/$tool/db.inc.php" <<PHPCODE
<?php
\$module_id = "$tool";
for (\$i = 0; \$i <= 20; \$i++) {
    \$custom_config[\$module_id][\$i]['db_driver'] = "mysql";
    \$custom_config[\$module_id][\$i]['db_host'] = "localhost";
    \$custom_config[\$module_id][\$i]['db_user'] = "opensips";
    \$custom_config[\$module_id][\$i]['db_name'] = "General";
    \$custom_config[\$module_id][\$i]['db_pass'] = "opensipsrw";
    \$custom_config[\$module_id][\$i]['db_port'] = "";
}
?>
PHPCODE
            echo "  ✓ $tool → General database"
        fi
    done
    
    # Fix system tools to use opensips database
    if [ -d "$CP_CONFIG/tools/system" ]; then
        find "$CP_CONFIG/tools/system" -name "db.inc.php" | while read config_file; do
            tool=$(basename $(dirname "$config_file"))
            cat > "$config_file" <<PHPCODE
<?php
\$module_id = "$tool";
for (\$i = 0; \$i <= 20; \$i++) {
    \$custom_config[\$module_id][\$i]['db_driver'] = "mysql";
    \$custom_config[\$module_id][\$i]['db_host'] = "localhost";
    \$custom_config[\$module_id][\$i]['db_user'] = "opensips";
    \$custom_config[\$module_id][\$i]['db_name'] = "opensips";
    \$custom_config[\$module_id][\$i]['db_pass'] = "opensipsrw";
    \$custom_config[\$module_id][\$i]['db_port'] = "";
}
?>
PHPCODE
        done
        echo "  ✓ System tools → opensips database"
    fi
    
    # Fix admin/users/reports tools
    for category in admin users reports; do
        if [ -d "$CP_CONFIG/tools/$category" ]; then
            find "$CP_CONFIG/tools/$category" -name "db.inc.php" | while read config_file; do
                tool=$(basename $(dirname "$config_file"))
                cat > "$config_file" <<PHPCODE
<?php
\$module_id = "$tool";
for (\$i = 0; \$i <= 20; \$i++) {
    \$custom_config[\$module_id][\$i]['db_driver'] = "mysql";
    \$custom_config[\$module_id][\$i]['db_host'] = "localhost";
    \$custom_config[\$module_id][\$i]['db_user'] = "opensips";
    \$custom_config[\$module_id][\$i]['db_name'] = "opensips";
    \$custom_config[\$module_id][\$i]['db_pass'] = "opensipsrw";
    \$custom_config[\$module_id][\$i]['db_port'] = "";
}
?>
PHPCODE
            done
            echo "  ✓ $category tools → opensips database"
        fi
    done
    
    # Update main config
    if [ -f "$CP_CONFIG/db.inc.php" ]; then
        sed -i 's/\$config->db_user\s*=.*/\$config->db_user = "opensips";/' "$CP_CONFIG/db.inc.php"
        sed -i 's/\$config->db_pass\s*=.*/\$config->db_pass = "opensipsrw";/' "$CP_CONFIG/db.inc.php"
        sed -i 's/\$config->db_name\s*=.*/\$config->db_name = "opensips";/' "$CP_CONFIG/db.inc.php"
        echo "  ✓ Main config updated"
    fi
    
    echo -e "${GREEN}✓ All Control Panel configs configured${NC}"
fi

# Enable Apache and start
systemctl enable apache2
systemctl restart apache2

if systemctl is-active --quiet apache2; then
    echo -e "${GREEN}✓ Apache web server is running${NC}"
else
    echo -e "${YELLOW}Warning: Apache failed to start. Check logs: journalctl -u apache2 -xe${NC}"
fi

echo -e "${GREEN}Step 10: Setting up OpenSIPs Service${NC}"

# Create systemd service if not exists
if [ ! -f /lib/systemd/system/opensips.service ]; then
    cat > /lib/systemd/system/opensips.service <<'SERVICE'
[Unit]
Description=OpenSIPS SIP Server
After=network.target

[Service]
Type=forking
PIDFile=/var/run/opensips.pid
ExecStart=/usr/local/sbin/opensips -P /var/run/opensips.pid
ExecReload=/bin/kill -HUP \$MAINPID
Restart=on-failure

[Install]
WantedBy=multi-user.target
SERVICE
fi

systemctl daemon-reload
systemctl enable opensips

echo -e "${GREEN}Step 11: Starting OpenSIPs${NC}"
systemctl start opensips
sleep 2

# Check if OpenSIPs is running
if systemctl is-active --quiet opensips; then
    echo -e "${GREEN}✓ OpenSIPs is running successfully!${NC}"
else
    echo -e "${RED}✗ OpenSIPs failed to start. Check logs: journalctl -u opensips -xe${NC}"
    echo "Common issues:"
    echo "  - Check /etc/opensips/opensips.cfg for errors"
    echo "  - Verify database connection settings"
    echo "  - Check if port 5060 is available"
fi

echo ""
echo "=================================================="
echo -e "${GREEN}Installation Complete!${NC}"
echo "=================================================="
echo ""
echo "OpenSIPs Status:"
systemctl status opensips --no-pager | head -10
echo ""
echo "Apache Web Server Status:"
systemctl status apache2 --no-pager | head -5
echo ""
echo -e "${GREEN}🌐 Web Interface Access:${NC}"
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "  OpenSIPs Control Panel: http://$SERVER_IP/opensips-cp/web"
echo ""
echo "  Default admin login: rezguitarek / kingsm"
echo ""
echo -e "${GREEN}📊 Database Summary:${NC}"
echo "  • opensips database: Core OpenSIPs data"
echo "  • General database: Wholesale data (carriers, clients, numbers)"
echo "  • Database users: opensips & web (both have full access)"
echo ""
echo "Useful commands:"
echo "  OpenSIPs logs: journalctl -u opensips -f"
echo "  Apache logs: journalctl -u apache2 -f"
echo "  Restart OpenSIPs: systemctl restart opensips"
echo "  Restart Apache: systemctl restart apache2"
echo "  Check config: opensips -c"
echo ""
echo -e "${YELLOW}IMPORTANT Post-Installation Steps:${NC}"
echo "1. Access web interface at http://$SERVER_IP/opensips-cp/web"
echo "2. Update IP addresses in /etc/opensips/opensips.cfg if needed"
echo "3. Configure firewall for SIP (port 5060/UDP) and HTTP (port 80/TCP)"
echo "4. Review TLS certificates if using encrypted transport"
echo "5. Test all Control Panel features:"
echo "   - Carriers (should show wholesale data)"
echo "   - Clients"
echo "   - System tools (dialplan, dispatcher, etc.)"
echo ""
